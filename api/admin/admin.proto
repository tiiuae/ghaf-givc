// Admin Service API
syntax = "proto3";
option go_package = "givc/modules/api/admin";
import "stats/stats.proto";
import "locale/locale.proto";
import "systemd/systemd.proto";

package admin;

message TransportConfig {
    string Protocol = 1;            // Protocol identifier, one of tcp, vsock, unix
    string Address = 2;             // IPv4 address, vsock CID, or unix socket path
    string Port = 3;                // Port number
    string Name = 4;                // Host name
}

message RegistryRequest {
    string Name = 1;                // Component name for registry entry
    string Parent = 2;              // Parent component identifier (registry name)
    uint32 Type = 3;                // Component type
    TransportConfig Transport = 4;  // `TransportConfig`
    systemd.UnitStatus State = 5;   // Unit status of the component (systemd)
}

message RegistryResponse {
    optional string Error = 1;      // Error message
}

message ApplicationRequest {
    string AppName = 1;             // Application name
    optional string VmName = 2;     // Name of the VM hosting the application
    repeated string Args = 3;       // Application arguments
}

message StatsRequest {
    string VmName = 1;              // VM name to query status information
}

message StartVMRequest {
    string VmName = 1;              // Name of the VM to start
}

message StartServiceRequest {
    string ServiceName = 1;         // Name of the service to start
    string VmName = 2;              // Name of the VM hosting service
}

message StartResponse {
    string registryId = 1;          // Registry ID for newly started app, service or vm
}

message ApplicationResponse {
    string CmdStatus = 1;           // Status of the RPC command
    string AppStatus = 2;           // Status of the application
}

message UnitStatusRequest {
    string VmName = 1;              // Name of the VM hosting the unit
    string UnitName = 2;            // Name of the unit
}

// Empty message
message Empty {
}

message QueryListItem {
    string Name = 1;                // Name of the unit
    string Description = 2;         // Description of the unit
    string VmStatus = 3;            // Status of the VM hosting the unit
    string TrustLevel = 4;          // Trust Level (future use)
    string VmType = 5;              // Type of the VM (future use)
    string ServiceType = 6;         // Type of the service (future use)
    optional string VmName = 7;     // Name of the VM to query; None for host running services
    optional string AgentName = 8;  // Name of the managing agent; None for agents
}

message QueryListResponse {
    repeated QueryListItem List = 1; // List of query responses
}

message WatchItem {
    oneof Status {
        QueryListResponse Initial = 1;
        QueryListItem Added = 2;
        QueryListItem Updated = 3;
        QueryListItem Removed = 4;
    }
}

message LocaleRequest {
    repeated locale.LocaleAssignment assignments = 1; // List of locale assignments
}

message TimezoneRequest {
    string Timezone = 1;            // String with timezone value. Format: [tz database](https://en.wikipedia.org/wiki/Tz_database) name, usually Area/City or Etc/GMT+3.
}

message PolicyQueryRequest {
    string Query = 1;
    string PolicyPath = 2;
}

message PolicyQueryResponse {
    string result = 1;
}

service AdminService {
    // Register a remote agent or service
    rpc RegisterService(RegistryRequest) returns (RegistryResponse) {}

    // Start a remote application
    rpc StartApplication(ApplicationRequest) returns (StartResponse) {}
    // Start a VM
    rpc StartVM(StartVMRequest) returns (StartResponse) {}
    // Start a remote service
    rpc StartService(StartServiceRequest) returns (StartResponse) {}
    // Pause (freeze) a remote application
    rpc PauseApplication(ApplicationRequest) returns (ApplicationResponse) {}
    // Resume (un-freeze) a remote application
    rpc ResumeApplication(ApplicationRequest) returns (ApplicationResponse) {}
    // Stop a remote application
    rpc StopApplication(ApplicationRequest) returns (ApplicationResponse) {}

    // Set locale (broadcasted across system)
    rpc SetLocale(LocaleRequest) returns (Empty) {}
    // Set timezone (broadcasted across system)
    rpc SetTimezone(TimezoneRequest) returns (Empty) {}

    // System poweroff command
    rpc Poweroff(Empty) returns (Empty) {}
    // System reboot command
    rpc Reboot(Empty) returns (Empty) {}
    // System suspend command
    rpc Suspend(Empty) returns (Empty) {}
    // System wakeup command
    rpc Wakeup(Empty) returns (Empty) {}

    // Get systemd unit status
    rpc GetUnitStatus(UnitStatusRequest) returns (systemd.UnitStatus) {}
    // Get stats information
    rpc GetStats(StatsRequest) returns (stats.StatsResponse) {}

    // Get list of monitored units
    rpc QueryList(Empty) returns (QueryListResponse) {}
    // Get stream of monitored units
    rpc Watch(Empty) returns (stream WatchItem) {}
    rpc PolicyQuery(PolicyQueryRequest) returns (PolicyQueryResponse) {}
}
